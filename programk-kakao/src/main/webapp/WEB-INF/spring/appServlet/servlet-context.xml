<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<context:component-scan base-package="m2u.eyelink.aibot" />

	<context:property-placeholder location="file:/chatbot/aibot/conf/commons.properties" />

	<!-- -->
	<!-- Configuration for encryptor, based on environment variables. -->
	<!-- -->
	<!-- In this example, the encryption password will be read from an -->
	<!-- environment variable called "APP_ENCRYPTION_PASSWORD" which, once -->
	<!-- the application has been started, could be safely unset. -->
	<!-- -->
	<!-- <bean id="environmentVariablesConfiguration"
		class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
		<property name="algorithm" value="PBEWITHMD5ANDDES" />
		<property name="passwordEnvName" value="commons.programk.postgresql.jdbc.password" />
		<property name="password" value="key for encrypt passwd" />
	</bean> -->

	<!-- -->
	<!-- The will be the encryptor used for decrypting configuration values. -->
	<!-- -->
	<!-- <bean id="configurationEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="config" ref="environmentVariablesConfiguration" />
	</bean> -->

	<!-- -->
	<!-- The EncryptablePropertyPlaceholderConfigurer will read the -->
	<!-- .properties files and make their values accessible as ${var}. -->
	<!-- -->
	<!-- Our "configurationEncryptor" bean (which implements -->
	<!-- org.jasypt.encryption.StringEncryptor) is set as a constructor arg. -->
	<!-- -->
	<!-- <bean id="propertyConfigurer"
		class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer">
		<constructor-arg ref="configurationEncryptor" />
		<property name="locations">
			<list>
				<value>file:/chatbot/aibot/conf/commons.properties</value>
			</list>
		</property>
	</bean> -->
 
 	<!-- 암복화 모듈 -->
    <bean id="jdbcConfig" class="m2u.eyelink.aibot.utils.JdbcConfig">
    	<property name="useCrypt"      value="${commons.programk.postgresql.jdbc.crypt}" />
        <property name="decUrl"        value="${commons.programk.postgresql.jdbc.url}" />
        <property name="decUsername"   value="${commons.programk.postgresql.jdbc.username}" />
        <property name="decPassword"   value="${commons.programk.postgresql.jdbc.password}" />
    </bean>
    
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="org.postgresql.Driver" />
		<!-- <property name="url" value="jdbc:postgresql://localhost:5432/talksearch" /> -->
		<property name="url" value="#{jdbcConfig.decUrl}"/>
        <property name="username" value="#{jdbcConfig.decUsername}"/>
        <property name="password" value="#{jdbcConfig.decPassword}"/>
		<!-- <property name="url" value="${commons.programk.postgresql.jdbc.url}" />
		<property name="username" value="${commons.programk.postgresql.jdbc.username}" />
		<property name="password" value="${commons.programk.postgresql.jdbc.password}" /> -->
		<property name="initialSize" value="${commons.programk.postgresql.jdbc.initialSize}" />
		<property name="maxActive"   value="${commons.programk.postgresql.jdbc.jdbc.maxActive}" />
		<property name="maxIdle"     value="${commons.programk.postgresql.jdbc.jdbc.maxIdle}" />
		<property name="minIdle"     value="${commons.programk.postgresql.jdbc.jdbc.minIdle}" />
		<property name="testWhileIdle"     value="${commons.programk.postgresql.testWhileIdle}" />
		<property name="validationQuery"     value="${commons.programk.postgresql.validationQuery}" />
		<property name="timeBetweenEvictionRunsMillis"     value="${commons.programk.postgresql.timeBetweenEvictionRunsMillis}" />
	</bean>

	<!-- mybatis setting -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="m2u.eyelink.aibot.mapper" />
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="WEB-INF/spring/mybatis-config.xml" />
	</bean>
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

</beans>
